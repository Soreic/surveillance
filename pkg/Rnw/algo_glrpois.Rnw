%Rnw file 
\name{algo.glrpois}
\alias{algo.glrpois}
\encoding{latin1}

\title{Poisson regression charts}
\description{
 Poisson regression charts for the monitoring of surveillance time series
}
\usage{
algo.glrpois(disProgObj,control = list(range=range,c.ARL=5, 
         mu0=NULL, Mtilde=1, M=-1, change="intercept",theta=NULL))
}
\arguments{
\item{disProgObj}{object of class \code{disProg} to do surveillance
    for}
\item{control}{A list controlling the behaviour of the algorithm.
    \describe{
    \item{range}{vector of indices in the observed vector
        to monitor (should be consecutive)}
   
    \item{mu0}{A vector of in-control values of the Poisson
        distribution with the same length as \code{range}. If
        \code{NULL} the observed values in \code{1:(min(range)-1)} are
        used to estimate beta through a generalized linear model. To
        fine-tune the model one can instead specify \code{mu0} as a
        list with two components:
        \describe{
        \item{S}{number of harmonics to include. }
        \item{trend}{Include a term \code{t} in the GLM model}
        }}
    \item{c.ARL}{threshold in the GLR test,
        i.e. \eqn{c_gamma}{c_{\gamma}}}
    \item{Mtilde}{number of observations needed before we
        have a full rank the typical setup for the
        "intercept" and "epi" charts is Mtilde=1}
    \item{M}{Number of time instances back in time in the
        window-limited approach, i.e. the last value
        considered is \eqn{\max{1,n-M}}. To always look back
        until the first observation use \code{M=-1}.}
    \item{change}{A string specifying the type of the
        alternative. Currently the two choices are
        \code{intercept} and \code{epi}. See the SFB
        Discussion Paper 500 for details.}
    \item{theta}{If \code{NULL} then the GLR scheme is
        used. If not \code{NULL} the prespecified value for
        \eqn{\kappa} or \eqn{\lambda} is used in a recursive
        LR scheme, which is faster.  }
    }
  }
}
\value{
\item{survRes}{ \code{algo.prc} returns a list of class \code{survRes}
    (surveillance result), which includes the alarm value for
    recognizing an outbreak (1 for alarm, 0 for no alarm), the
    threshold value for recognizing the alarm and the input object of
    class disProg. The \code{upperbound} slot of the object are filled
    with the current \eqn{GLR(n)} value.  } 
}
%
\details{ 
%
  This function implements the seasonal Poisson charts based on
  generalized likelihood ratio (GLR) as described in the SFB
  Discussion Paper 500. A moving-window generalized likelihood ratio
  detector is used, i.e. the detector has the form
%
\deqn{N = \inf\left\{ n : \max_{1\leq k \leq
      n} \left[ \sum_{t=k}^n \log \left\{
        \frac{f_{\theta_1}(x_t|z_t)}{f_{\theta_0}(x_t|z_t)} \right\}
    \right] \geq c_\gamma \right\} }{N = inf(... >= c_gamma)}
%
where instead of \eqn{1<= k <= n}{1\leq k \leq n} the GLR statistic is
computed for all \eqn{k \in \{n-M, \ldots, n-\tilde{M}+1\}}. To
achieve the typical behaviour from \eqn{1\leq k\leq n} use
\code{Mtilde=1} and \code{M=-1}.

So \eqn{N} is the time point where the GLR statistic is above the
threshold the first time: An alarm is given and the surveillance is
resetted starting from time \eqn{N+1}. Note that the same
\code{c.gamma} as before is used, but if \code{mu0} is different at
\eqn{N+1,N+2,\ldots} compared to time {1,2,\ldots} the run length
properties differ. Because \code{c.gamma} to obtain a specific ARL can
only be obtained my Monte Carlo simulation there is no good way to
update \code{c.gamma} automatically at the moment. Also, FIR GLR-detectors
might be worth considering.

At the moment, window limited ``intercept'' charts have not been
extensively tested and are at the moment not supported. As speed is
not an issue here this doesn't bother too much. Therefore, a value of
\code{M=-1} is always used in the intercept charts.

}
\seealso{
\code{\link{algo.rkiLatestTimepoint}}
}
\author{M. Hoehle}
\examples{
##Simulate data and apply the algorithm
S <- 1 ; t <- 1:120 ; m <- length(t)
beta <- c(1.5,0.6,0.6)
omega <- 2*pi/52
#log mu_{0,t}
base <- beta[1] + beta[2] * cos(omega*t) + beta[3] * sin(omega*t) 
#Generate example data with changepoint and tau=tau
tau <- 100
kappa <- 0.4
mu0 <- exp(base)
mu1 <- exp(base  + kappa) 

#Generate data
set.seed(42)
x <- rpois(length(t),mu0*(exp(kappa)^(t>=tau)))
s.ts <- create.disProg(week=1:length(t),observed=x,state=(t>=tau))

#Plot the data
plot(s.ts,legend=NULL,xaxis.years=FALSE)

#Run 
cntrl = list(range=t,c.ARL=5, Mtilde=1, mu0=mu0,change="intercept")
glr.ts <- algo.glrpois(s.ts,control=cntrl)
lr.ts  <- algo.glrpois(s.ts,control=c(cntrl,theta=0.4))

plot(glr.ts,xaxis.years=FALSE)
plot(lr.ts,xaxis.years=FALSE)

}

\keyword{}
\source{
Poisson regression charts for the monitoring of surveillance time
series (2006), Höhle, M., SFB386 Discussion Paper 500.
}

<<echo=F>>=

######################################################################
# 
# Implementation of GLR -- documentation converted to Rd format.
#
# Author: Michael Hoehle
# Date:   27 Nov 2006
#
######################################################################

algo.glrpois <- function(disProgObj, 
                         control = list(range=range,c.ARL=5, 
                           mu0=NULL, Mtilde=1, M=-1, change="intercept",theta=NULL)){
  
  # Set the default values if not yet set
  if(is.null(control$c.ARL))
    control$c.ARL <- 5
  if(is.null(control$change))
    control$change <- "intercept" 
  if(is.null(control$Mtilde))
    control$Mtilde <- 1
  if(is.null(control$M))
    control$M <- -1

  #GLM (only filled if estimated)
  m <- NULL

  #Extract the important parts from the arguments
  observed <- disProgObj$observed
  t <- control$range
  control$mu0Model <- NULL
  range <- control$range

  # Estimate m (the expected number of cases), i.e. parameter lambda of a
  # poisson distribution based on time points 1:t-1
  if (is.null(control$mu0) | is.list(control$mu0)) {
    #Initialize
    if (is.null(control$mu0)) control$mu0 <- list()
    if (is.null(control$mu0$S)) control$mu0$S <- 1
    if (is.null(control$mu0$trend)) control$mu0$trend <- FALSE
    if (is.null(control$mu0$refit)) control$m0$refit <- FALSE
    control$mu0Model <- control$mu0

    #Estimate using a hook function (lazy evaluation)
    control$mu0 <- estimateGLRPoisHook()
  } 
  
  #The counts
  x <- observed[control$range]
  mu0 <- control$mu0

  #Reserve space for the results
  # start with cusum[timePoint -1] = 0, i.e. set cusum[1] = 0
  alarm <- matrix(data = 0, nrow = length(t), ncol = 1)
  upperbound <- matrix(data = 0, nrow = length(t), ncol = 1)

  #Setup counters for the progress
  doneidx <- 0
  N <- 1
  xm10 <- 0
  noOfTimePoints <- length(t)
  #Loop as long as we are not through the sequence
  while (doneidx < noOfTimePoints) {
    #cat("Doneidx === ",doneidx,"\n")
    #Call the C-interface -- this should depend on the type
    if (control$change == "intercept") {
      if (is.null(control$theta)) {
        res <- .C("glr_cusum",as.integer(x),as.double(mu0),length(x),as.integer(control$Mtilde),as.double(control$c.ARL),N=as.integer(0),val=as.double(x),PACKAGE="surveillance")
      } else {
        res <- .C("lr_cusum",as.integer(x),as.double(mu0),length(x),as.double(control$theta),as.double(control$c.ARL),N=as.integer(0),val=as.double(x),PACKAGE="surveillance")
      }
    } else {
      ########################## Epidemic chart #######################
      if (control$change == "epi") {
        res <- .C("glr_epi_window",as.integer(x),as.double(mu0),length(x),as.integer(control$Mtilde),as.integer(control$M),as.double(xm10),as.double(control$c.ARL),N=as.integer(0),val=as.double(x),PACKAGE="surveillance")
      }
    }

    #In case an alarm found log this and reset the chart at res$N+1
    if (res$N < length(x)) {
      upperbound[1:res$N + doneidx] <- res$val[1:res$N]
      alarm[res$N + doneidx] <- TRUE

      #Chop & get ready for next round
      xm10 <- x[res$N] #put start value x_0 to last value
      x <- x[-(1:res$N)] ; t <- t[-(1:res$N)] 
      #If no refitting is to be done things are easy
      if (!is.list(control$mu0Model) || (control$mu0Model$refit == FALSE)) { 
        mu0 <- mu0[-(1:res$N)]
      } else {
        #Update the range (how to change back??)
        range <- range[-(1:res$N)]
        mu0 <- estimateGLRPoisHook()
        control$mu0[(doneidx + res$N + 1):length(control$mu0)] <- mu0
      }

      
    }
    doneidx <- doneidx + res$N
  }

  # ensure upper bound is positive and not NaN
  upperbound[is.na(upperbound)] <- 0
  upperbound[upperbound < 0] <- 0
    
  
  #Add name and data name to control object.
  control$name <- paste("glrpois:", control$change)
  control$data <- paste(deparse(substitute(disProgObj)))
  control$m    <- m
  
  # return alarm and upperbound vectors
  result <- list(alarm = alarm, upperbound = upperbound, disProgObj=disProgObj,control=control)

  class(result) = "survRes" # for surveillance system result
  return(result)
}

@ 


%Rnw file 
\name{estimateGLRPoisHook}
\alias{estimateGLRPoisHook}
\encoding{latin1}

\title{Hook function for in-control mean estimation}
\description{
 Allows the user to specify his own estimation routine for the in-control mean of \code{algo.glrpois}
}
\usage{
estimateGLRPoisHook()
}
\arguments{
}
\value{
  A vector of length as \code{range} containing the predicted values.
}
%
\details{ 
%
}
\seealso{
\code{\link{algo.glrpois}}
}
\author{M. Hoehle}
\examples{
\dontrun{
estimateGLRPoisHook <- function() {
  #Fetch control object from parent
  control <- parent.frame()$control
  #The period
  p <- parent.frame()$disProgObj$freq
  #Current range to perform surveillance on
  range <- parent.frame()$range

  #Define training & test data set (the rest)
  train <- 1:(range[1]-1)
  test <- range
  
  #Perform an estimation based on all observations before timePoint
  #Event better - don't do this at all in the algorithm - force
  #user to do it himself - coz its a model selection problem
  data <- data.frame(y=parent.frame()$disProgObj$observed[t],t=train)
  #Build the model equation
  formula <- "y ~ 1 "
  if (control$mu0Model$trend) { formula <- paste(formula," + t",sep="") }
  for (s in 1:control$mu0Model$S) {
    formula <- paste(formula,"+cos(2*",s,"*pi/p*t)+ sin(2*",s,"*pi/p*t)",sep="")
  }
  #Fit the GLM
  m <- eval(substitute(glm(form,family=poisson(),data=data),list(form=as.formula(formula))))

  #Predict mu_{0,t}
  return(as.numeric(predict(m,newdata=data.frame(t=range),type="response")))
}
}
}

\keyword{}
\source{}


<<echo=FALSE>>=
estimateGLRPoisHook <- function() {
  #Fetch control object from parent
  control <- parent.frame()$control
  #The period
  p <- parent.frame()$disProgObj$freq
  #Current range to perform surveillance on
  range <- parent.frame()$range

  #Define training & test data set (the rest)
  train <- 1:(range[1]-1)
  test <- range
  
  #Perform an estimation based on all observations before timePoint
  #Event better - don't do this at all in the algorithm - force
  #user to do it himself - coz its a model selection problem
  data <- data.frame(y=parent.frame()$disProgObj$observed[t],t=train)
  #Build the model equation
  formula <- "y ~ 1 "
  if (control$mu0Model$trend) { formula <- paste(formula," + t",sep="") }
  for (s in 1:control$mu0Model$S) {
    formula <- paste(formula,"+cos(2*",s,"*pi/p*t)+ sin(2*",s,"*pi/p*t)",sep="")
  }
  #Fit the GLM
  m <- eval(substitute(glm(form,family=poisson(),data=data),list(form=as.formula(formula))))

  #Predict mu_{0,t}
  return(as.numeric(predict(m,newdata=data.frame(t=range),type="response")))
}
@ 
