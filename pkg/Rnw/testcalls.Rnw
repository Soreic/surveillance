@

\name{test}
\alias{test}
\encoding{latin1}
\title{Print xtable for several diseases and the summary}

\description{Just a test method
}
\usage{
    test(data = c("k1", "m5"), range = 157:339)
}
\arguments{
        \item{data}{vector of abbreviations for the diseases}
        \item{range}{timepoints to evaluate}
}
\value{
        \item{xtable}{printed latex tables}
}
\details{The specified datasets are readed, corrected, enlarged and sent to
        the RKI 1, RKI 2, RKI 3 and Bayes system. The quality values are computed
        and printed for each diesease as latex table. Additonally a summary latex table
        for all diseases is printed
}
\author{M. Höhle, A. Riebler, C. Lang}
\examples{
    test(c("m1", "m2", "m3", "m4", "m5", "q1_nrwh", "q2", "s1",
                        "s2", "s3", "k1", "n1", "n2", "h1_nrwrp"))
}

\keyword{misc}

<<echo=F>>=

test <- function(data = c("k1", "m5"), range = 157:339){
  res <- list()
  for(i in data){
    disProgObj <- readData(i,week53to52=TRUE)
    disProgObj <- enlargeData(disProgObj)
    survResults <- algo.call(disProgObj, 
                             control = list(
                               list(funcName = "rki1", range = range),
                               list(funcName = "rki2", range = range),
                               list(funcName = "rki3", range = range),
                               list(funcName = "bayes", range = range,alpha=0.05)))
    res[[i]] <- algo.compare(survResults)
    cat("\n\n\n", i, " Res:\n")
    print(compMatrix.writeTable(res[[i]]))
  }
  sum <- algo.summary(res)
  cat("\n\nSummary:\n")
  print(compMatrix.writeTable(sum))
}
@

\name{testSim}
\alias{testSim}
\encoding{latin1}
\title{Print xtable for a Simulated Disease and the Summary}
\description{Just a test method.
}
\usage{
    testSim(p = 0.99, r = 0.01, length = 400, A = 1, alpha = 1,
            beta = 0, phi = 0, frequency = 1, state = NULL, K, 
            range = 200:400)
}
\arguments{
\item{p}{probability to get a new epidemy at time i if there was one at time i-1, default 0.99}
\item{r}{probability to get no new epidemy at time i if there was none at time i-1, default 0.01}
\item{length}{number of weeks to model, default 400}
\item{A}{amplitude (range of sinus), default = 1}
\item{alpha}{parameter to move along the y-axis (negative values not allowed)
    with alpha > = A, default = 1}
\item{beta}{regression coefficient, default = 0}
\item{phi}{factor to create seasonal moves
    (moves the curve along the x-axis), default = 0}
\item{frequency}{factor to determine the oscillation-frequency, default = 1}
\item{state}{use a state chain to define the status at this timepoint (outbreak or not).
    If not given a Markov chain is generated by the programme, default NULL}
\item{K}{additional weigth for an outbreak which influences the distribution
    parameter mu, default = 0}
\item{range}{range of timepoints to be evaluated by the RKI 1 system, default 200:400.}
}
\value{
\item{xtable}{one printed latex table and a result plot}
}
\details{A pointSource epidemy is generated and sent to the RKI 1 system, the quality values for
  the result are computed and shown as a latex table. Additionally a plot of the result
  is generated.
}
\seealso{\code{\link{sim.pointSource}}, \code{\link{algo.call}}, \code{\link{algo.compare}},
  \code{\link{plot.survRes}}, \code{\link{compMatrix.writeTable}}
}
\author{M. Höhle, A. Riebler, C. Lang}
\examples{
    testSim(K = 2)
    testSim(r = 0.5, K = 5)
}

\keyword{misc}

<<echo=F>>=

testSim <- function(p = 0.99, r = 0.01, length = 400, A = 1, alpha = 1, beta = 0,
                                phi = 0, frequency = 1, state = NULL, K, range = 200:400){

        disProgObj <- sim.pointSource(p, r, length, A, alpha, beta,
                                phi, frequency, state, K)
        survResults <- algo.call(disProgObj, control = list(list(funcName = "rki1", range = range)))
        res <- algo.compare(survResults)
        plot(survResults[[1]], "RKI 1", "Simulation")
        print(compMatrix.writeTable(res))

}


@

\name{makePlot}
\alias{makePlot}
\encoding{latin1}

\title{Plot Generation}
\description{Just a test method.
}
\usage{
    makePlot(outputpath, data = "k1", method = "rki1",
                                name, disease, range = 157:339)
}
\arguments{
        \item{outputpath}{path for the storage}
        \item{data}{abbreviation of the disease-file}
        \item{method}{method to be called}
        \item{name}{name of the method}
        \item{disease}{disease name}
        \item{range}{range to plot}
}
\details{\code{makePlot} reads the data given in \code{data} using the function \code{readData},
        and the data are corrected to 52 weeks, enlarged using
        \code{enlargeData} and sendt to the surveillance system given in \code{method}.
        The system result is plotted and stored in \code{outputpath}.
}
\seealso{\code{\link{readData}}, \code{\link{correct53to52}}, \code{\link{enlargeData}},
                \code{\link{algo.call}}, \code{\link{plot.survRes}}
}
\author{M. Höhle, A. Riebler, C. Lang}
\examples{
    makePlot("./", "k1", "rki2", "RKI 2", "Kryptosporidiose")
}

\keyword{misc}

<<echo=F>>=

makePlot <- function(outputpath, data = "k1", method = "rki1", name, disease, range = 157:339){
        disProgObj <- readData(data,week53to52=TRUE)
        disProgObj <- enlargeData(disProgObj)
        res <- algo.call(disProgObj, control = list(list(funcName = method, range = range)))
        pdf(paste(outputpath, data, "_", method, "_plot.pdf", sep=""), width = 10)
                plot(res[[1]],name,disease)
        dev.off()
}

