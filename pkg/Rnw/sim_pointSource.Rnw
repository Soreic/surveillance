@

\name{sim.pointSource}
\alias{sim.pointSource}
\encoding{latin1}

\title{Generation of Simulated Point Source Epidemy}
\description{Simulation of epidemies which were introduced by point sources.
        The basis of this proagramme is a combination of a Hidden Markov Modell
        (to get random timepoints for outbreaks) and a simple model
        (compare \code{\link{sim.seasonalNoise}}) to simulate the epidemy.
}
\usage{
    sim.pointSource(p = 0.99, r = 0.01, length = 400, A = 1, 
        alpha = 1, beta = 0, phi = 0, frequency = 1, state = NULL, K)
}
\arguments{
        \item{p}{probability to get a new epidemy at time i if there was one at time i-1, default 0.99.}
        \item{r}{probability to get no new epidemy at time i if there was none at time i-1, default 0.01.}
        \item{length}{number of weeks to model, default 400. \code{length} is ignored if \code{state}
                        is given. In this case the length of \code{state} is used.}
        \item{A}{amplitude (range of sinus), default = 1.}
        \item{alpha}{parameter to move along the y-axis (negative values not allowed)
                       with alpha > = A, default = 1.}
        \item{beta}{regression coefficient, default = 0.}
        \item{phi}{factor to create seasonal moves
                        (moves the curve along the x-axis), default = 0.}
        \item{frequency}{factor to determine the oscillation-frequency, default = 1.}
        \item{state}{use a state chain to define the status at this timepoint (outbreak or not).
                If not given a Markov chain is generated by the programme, default NULL.}
        \item{K}{additional weigth for an outbreak which influences the distribution
                parameter mu, default = 0.}
}
\value{
        \item{disProg}{a object \code{disProg} (disease progress) including a list of the observed, the state chain
                and nearly all input parameters.
        }
}
\seealso{\code{\link{sim.seasonalNoise}}
}
\author{M. Höhle, A. Riebler, C. Lang}
\examples{
    # Plotting of simulated data
    disProgObj <- sim.pointSource(p = 0.99, r = 0.5, length = 208,
                                    A = 1, alpha = 1, beta = 0, phi = 0,
                                    frequency = 1, state = NULL, K = 2)
    # plot the simulated disease with the defined outbreaks
    plot(disProgObj)

    state <- rep(c(0,0,0,0,0,0,0,0,1,1), 20)
    disProgObj <- sim.pointSource(state = state, K = 1.2)
    plot(disProgObj)
}

\keyword{datagen}

<<echo=F>>=

# Programme to simulate epidemies which were
# introduced by point sources.
# The basis of this proagramme is a combination of
# a Hidden Markov Modell (to get random dates
# for outbreaks) and a simple Model to simulate
# the epidemy.
#
# Parameters:
# r - probability to get a new epidemy at time i if there was one
#     at time i-1
# p - probability to get no new epidemy at time i if there was none
#     at time i-1
# length - number of timesteps to visit
#
# Parameters for the background:
# A - Amplitude, default = 1.
# alpha - Incidence, default = 1.
# beta - time dependent regression coefficient, default = 0.
# phi - weeks of seaonal move, default = 0.
# frequency - frequency of the sinus, default = 1.
# state - a eventually given markov chain,
#               which defines the status at this time (outbreak or not)
# K - additional weigth for an outbreak

sim.pointSource <- function(p = 0.99, r = 0.01, length = 400, A = 1, alpha = 1, beta = 0,
                                phi = 0, frequency = 1, state = NULL, K){

  if(is.null(state)){
        # create a markov-chain
    state <- matrix(data = 0, ncol = 1, nrow = length)
    state[1] <- 0 #hoehle - fix: rbinom(1,1,0.5) # always begin with a zero

        # create the transition matrix
    transitionMatrix <- matrix(data = c(p, (1-r),(1-p), r), nrow = 2, ncol = 2)

    if(length(state) > 1){ # just do it if there is a preceding value
      for (i in 2:length){
                        # check the matrix for the correct line and take the right
                        # probability. The last value of state is the newest.
        state[i] <- rbinom(1,1,transitionMatrix[state[i-1] + 1, 2])
      }
    }
  }

  # go sure to have the rigth length as parameter
  length <- length(state)
  observed <-sim.seasonalNoise(A, alpha, beta, phi, length, frequency, state, K)$seasonalBackground

  result <- list(observed = observed, state = state, A = A, alpha = alpha, beta = beta, K = K, p = p, r = r, freq=52, start=c(2001,1))
  class(result) = "disProg" # for disease progress

  return(result)
}



