\encoding{latin1}
\name{twinstim_simulation}
\alias{simEpidataCS}
\alias{simulate.twinstim}

\title{
Simulation of a Space-Time Point Process based on the 'twinstim' model
}

\description{ This function simulates the event times of a
  self-exiciting spatio-temporal point process. Simulation works via the
  conditional intensity as defined as described by the twinstim
  modelling class in Meyer et al. (2010).

  The \code{\link{simulate}} method for objects of class
  \code{"\link{twinstim}"} simulates new epidemic data using the model and
  the parameter estimates of the fitted object.
}

\usage{
simEpidataCS(endemic, epidemic, siaf, tiaf, qmatrix, rmarks,
    events, stgrid, tiles, beta0, beta, gamma, siafpars, tiafpars,
    t0 = stgrid$start[1], T = tail(stgrid$stop,1), nEvents = 1e5, nCub,
    W = unionSpatialPolygons(tiles, IDs = rep.int(1,length(tiles@polygons)), avoidGEOS = TRUE),
    trace = 5, nCircle2Poly = 32, gmax = NULL, .allocate = 500,
    .skipChecks = FALSE, .onlyEvents = FALSE)
simulate.twinstim <- function (object, nsim = 1, seed = NULL, data, tiles,
    rmarks = NULL, t0 = NULL, T = NULL, nEvents = 1e5, nCub,
    W = unionSpatialPolygons(tiles, IDs = rep.int(1,length(tiles@polygons)), avoidGEOS = TRUE),
    trace = FALSE, nCircle2Poly = 32, gmax = NULL, .allocate = 500,
simplify = TRUE)
}

\arguments{
  \item{endemic}{see 'twinstim'. Note that the extra argument 'typeSpecificEndemicIntercept' of 'twinstim' is implied by 'beta0' here.}
  \item{epidemic}{see 'twinstim'. Marks appearing in this formula must
    be returned by the generating function 'rmarks'.}
  \item{siaf}{see \link{twinstim::siaf}. The 'siaf' specification must contain the element 'simulate', a function which draws random locations following the spatial kernel 'siaf$f'. The first argument of the function is the number of points to sample, the second one is the vector of parameters 'siafpars', the third one is the type indicator (a character string matching a type name as specified by 'dimnames(qmatrix)'); with the current implementation there will always be simulated only one location at a time.}
  \item{tiaf}{See siaf}
  \item{qmatrix}{see 'epidataCS'. Note that this square matrix and its
  'dimnames' determine the number and names of the different event
  types. In the simplest case, there is only a single type of event,
  i.e. qmatrix = diag(1).}
\item{rmarks}{function of single time (1st arg) and location
  (2nd arg) returning a one-row data.frame of marks (named according to
  the variables in 'epidemic') for an event at this point. This includes
  the columns eps.s and eps.t, i.e. the values of the spatial and
  temporal interaction ranges at this point. Only "numeric" and "factor"
  columns are allowed. Assure that factor variables are coded equally
  (same levels and level order) for each new sample. If there is no
  epidemic component in the process, 'rmarks' can be missing or NULL.}
\item{events}{NULL or missing (default) in case of an empty prehistory,
  or a SpatialPointsDataFrame containing events of the prehistory
  (-Inf;t0] of the process (having the same 'proj4string' as 'tiles' and
  'W'). The attached data.frame (data slot) must contain the typical
  columns as described in as.epidataCS (time, tile, eps.t, eps.s [,
  type]) and all marks appearing in the 'epidemic' specification. Note
  that the column names "ID", ".obsInfLength", ".bdist",
  ".influenceRegion", and ".sources" are reserved. Only events up to
  time t0 are selected and taken asthe prehistory.}
\item{stgrid}{see as.epidataCS. Simulation only works inside the spatial
  and temporal range of stgrid.}
\item{tiles}{object inheriting from SpatialPolygons with row.names equal
  to the tile names in stgrid and having the same proj4string as
  'events' and 'W'. This is necessary to draw the spatial location of
  events generated by the endemic component.}
\item{beta0}{ these are the parameter
  subvectors of the 'twinstim'. 'beta' and 'gamma' must be given in the
  same order as they appear in 'endemic' and 'epidemic',
  respectively. 'beta0' is either a single endemic intercept or a vector
  of type-specific endemic intercepts in the same order as in
  'qmatrix'.}
\item{beta}{See beta0}
\item{gamma}{See beta0}
\item{siafpars}{See beta0}
\item{tiafpars}{See beta0}
\item{t0}{
  events having occured during (-Inf;t0] are regarded as part of the
  prehistory H_0 of the process. The time point 't0' must be an element
  of data$stgrid$start. By default, and also if 't0=NULL', it is the
  earliest time point of the spatio-temporal grid 'stgrid'. 
}
\item{W}{
  W: see as.epidataCS. Must have the same proj4string as 'events' and
  'tiles'. By default, 'W' is generated automatically by calculating the
  union of the 'tiles'. This might take a while so it might be useful to
  create 'W' in advance. It is important that 'W' and 'tiles' cover the
  same region, because on the one hand offspring is sampled in the
  spatial influence region of the parent event (which is the
  intersection of 'W' and a circle of radius the "eps.s" of the parent
  event), and on the other hand the tiles of the sampled coordinates are
  determined by overlay with 'tiles'.
}
\item{trace}{
  logical (or integer) indicating if (or how often) the current
  simulation status should be \code{cat}ed.  Defaults to \code{FALSE}.
}
\item{.allocate}{
  number of rows to initially allocate for the event history; defaults to
  500.  Each time the simulated epidemic exceeds the allocated space,
  the event data.frame will be enlarged by \code{.allocate} rows.
}
\item{.skipChecks}{these arguments are not meant to be set
  by the user. They are used by the simulate-method for twinstim
  objects.
}
\item{.onlyEvents}{See .skipChecks}
\item{object}{
  an object of class \code{"twinstim"}.
  }
  \item{nsim}{
    number of epidemics to simulate.  spatio-temporal point patterns
  (inheriting from "epidataCS") to simulate.  Defaults to 1 and the
  result is a simple object inheriting from class "simEpidataCS" (as if
  simEpidataCS would have called directly).  If 'nsim > 1' the result
  will be a list the structure of which depends on the argument
  'simplify'. 
}
\item{seed}{
  an object specifying if and how the random number generator should be
  initialized ( seeded ). By default (NULL), the state of the random
  generator is not changed and the value of .Random.seed prior to
  simulation is stored as attribute "seed" of the result. 
}
\item{data}{
  an object of class "epidataCS", usually the one to which the
  "twinstim" 'object' was fitted
}
\item{t0}{
  temporal range of the simulation(s). By default (NULL), the same time
  range as for the fitting of 'object' is used. 
}
\item{T}{
  See t0
}
\item{simplify}{it is strongly recommended to set 'simplify = TRUE' (default) if 'nsim' is large. This saves space and computation time, because for each simulated epidemic only the "events" component is saved. All other components, which do not vary between simulations, are only stored from the first run. In this case, the runtime of each simulation is stored as an attribute "runtime" to each simulated "events".}
}

\details{
}

\references{
  S. Meyer, J. Elias and M. Höhle (2010): A space-time conditional
  intensity model for infectious disease occurence, Department of
  Statistics: Technical Reports, No. 95, 27 pages, 2010.
  Available as http://epub.ub.uni-muenchen.de/11898/
  
  Meyer, S. (2010): Spatio-Temporal Infectious Disease Epidemiology based
  on Point Processes. Master Thesis, Ludwig-Maximilians-\enc{Universität}{Universitaet}
  München. Available as http://epub.ub.uni-muenchen.de/11703/
}

\author{ 
Sebastian Meyer and Michael \enc{Höhle}{Hoehle}
}

\seealso{
The \code{\link[=plot.epidata]{plot}} method and the function
\code{\link{animate.epidata}} for plotting and animation of epidemic data,
respectively.
\code{\link{intensityPlot}} for plotting the path of the infection intensity.

Function \code{\link{twinstim}} for fitting spatio-temporal epidemic intensity
models to epidemic data.
}

\examples{
set.seed(1234)
# Generate a data frame containing a hypothetic population with 100 individuals
n <- 100
pos <- matrix(rnorm(n*2), ncol=2, dimnames=list(NULL, c("x", "y")))
pop <- data.frame(id=1:n,x=pos[,1], y=pos[,2], 
                  gender=sample(0:1, n, replace=TRUE),
                  I0col=rep(0,n),start=rep(0,n),stop=rep(Inf,n))

epi <- simEpidata(cbind(start,stop) ~ cox(gender), 
                  data = pop, 
                  id = "id", I0.col = "I0col", coords.cols = c("x","y"),
                  beta = c(-3), h0 = -2, alpha = c(B1 = 0.1),
                  f = list(B1 = function(u) u <= 1),
                  infPeriod = function(ids) rexp(length(ids), rate=1))
plot(epi)

# load data of an observed epidemic
data("fooepidata")
summary(fooepidata)

# simulate a new evolution of the epidemic
simepi <- simEpidata(cbind(start, stop) ~ cox(z1) + cox(z1):cox(z2),
    data = fooepidata, 
    beta = c(1,0.5), h0 = -7, alpha = c(B2 = 0.1, B1 = 0.05),
    f = list(B1 = function(u) u<=1, B2 = function(u) u>1 & is.finite(u)),
    infPeriod = function(ids) rexp(length(ids), rate=1), trace = FALSE)
summary(simepi)
plot(simepi)
\dontrun{
animate(simepi)
}
intensityPlot(simepi)

# load a fitted model object, which must contain the original data 
# (use 'keep.data = TRUE' in the call of 'twinstim')
data("foofit")
foofit

# plot original epidemic
plot(foofit$data)

## simulate a new epidemic using the model and parameter estimates of 'foofit'
## and set simulation period = observation period
# with observed infPeriods:
simfitepi1 <- simulate(foofit, nsim = 1)[[1]]
plot(simfitepi1)
# with new infPeriods:
simfitepi2 <- simulate(foofit, nsim = 1,
                       infPeriod=function(ids) rexp(length(ids), rate=0.3))[[1]]
plot(simfitepi2)
}

\keyword{datagen}
\keyword{models}
